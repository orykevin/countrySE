{"version":3,"file":"static/css/main.3fac792c.css","mappings":"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","sources":["Style/index.scss","Style/App.scss","Style/BreakPoints.scss","Style/CountryDetails.scss","Style/Credit.scss"],"sourcesContent":["body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","@import \"./BreakPoints.scss\";\n@mixin center {\n  margin: 0 auto;\n}\n*{\n  margin: 0;\n  padding: 0;\n}\n.ham-btn{\n  width: 29px;\n  position: absolute;\n  top: 20px;\n  right: 5%;\n}\n.search-sect{\n  h1{\n    margin: 2em 0 25px 0;\n    font-size: 72px;\n    text-align: center;\n    @include media(\"<=tablet\"){\n      font-size: 48px;\n      margin-top: 20%\n  }\n  @include media(\"<=set1\"){\n    font-size: 48px;\n    margin-top: 50%;\n    margin-bottom: 30px\n}\n  }\n  .search-box{\n    @include center;\n    max-width: 570px;\n    width: 90%;\n    position: relative;\n    @include media(\"<=tablet\"){\n      max-width: 450px;\n    }   \n    input{\n      width: 88%;\n      padding: 10px 50px 10px 15px;\n      font-size:18px ;\n      border-radius: 10px;\n      border: none ;\n      box-shadow:0 0 0 1pt grey ;\n      outline: none;  \n      @include media(\"<=tablet\"){\n        padding:10px 25px 10px 15px; ;\n      }      \n    }\n    input:focus {\n      border: none;\n      box-shadow: 0 0 0 1pt #8362F2;\n  }\n    svg{\n      width: 18px;\n      position: absolute;\n      top: 10px;\n      right: 15px;\n      @include media(\"<=tablet\"){\n        right: 20px;\n      } \n    }\n  }\n}\n.result-box{\n  @include center;\n    max-width: 570px;\n    width: 100%;\n    position: relative;\n    box-shadow:0 0 4pt 2pt rgba(169, 169, 169, 0.155) ;\n    border-radius: 10px;\n    padding: 15px 0;\n    margin-top: 10px;\n  .result{\n    display: flex;\n    text-align: left;\n    font-size: 18px;\n    padding: 3px 0 3px 20px ;\n    margin: 0;\n    height: 30px;\n    cursor: pointer;\n    img{\n      box-shadow: 3px 2px 7px rgb(148, 148, 148);\n      width: 25px;\n      height: 17px;\n      margin: 5px 15px 0 0 ;\n    }\n  }\n  .result:hover{\n    background-color: rgb(206, 206, 206);\n  }\n  .no-res{\n    color: red;\n  }\n\n}\n\n","///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: (\r\n  'phone': 320px,\r\n  'tablet': 768px,\r\n  'desktop': 1024px,\r\n  \"set1\":538px,\r\n  \"set2\":738px,\r\n  \"set3\":410px,\r\n) !default;\r\n\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n  'screen': 'screen',\r\n  'print': 'print',\r\n  'handheld': 'handheld',\r\n  'landscape': '(orientation: landscape)',\r\n  'portrait': '(orientation: portrait)',\r\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\r\n) !default;\r\n\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  'px': 1,\r\n  'em': 0.01,\r\n  'rem': 0.1,\r\n  '': 0\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n  @if feature-exists('at-error') {\r\n    @error $message;\r\n  } @else {\r\n    @warn $message;\r\n    $_: noop();\r\n  }\r\n\r\n  @return $message;\r\n}\r\n\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n  @if im-log($message) {}\r\n}\r\n\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n  @if not $no-media-breakpoint-value {\r\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\r\n  }\r\n\r\n  @each $condition in $conditions {\r\n    @if not map-has-key($media-expressions, $condition) {\r\n      $operator: get-expression-operator($condition);\r\n      $prefix: get-expression-prefix($operator);\r\n      $value: get-expression-value($condition, $operator);\r\n\r\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\r\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\r\n        @return false;\r\n      }\r\n    } @else if not index($im-no-media-expressions, $condition) {\r\n      @return false;\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n    @if str-index($expression, $operator) {\r\n      @return $operator;\r\n    }\r\n  }\r\n\r\n  // It is not possible to include a mixin inside a function, so we have to\r\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n  // functions cannot be called anywhere in Sass, we need to hack the call in\r\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n  $_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n  $dimension: 'width';\r\n\r\n  @if str-length($parsed-dimension) > 0 {\r\n    $dimension: $parsed-dimension;\r\n  }\r\n\r\n  @return $dimension;\r\n}\r\n\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n  @if map-has-key($breakpoints, $value) {\r\n    $value: map-get($breakpoints, $value);\r\n  } @else {\r\n    $value: to-number($value);\r\n  }\r\n\r\n  $interval: map-get($unit-intervals, unit($value));\r\n\r\n  @if not $interval {\r\n    // It is not possible to include a mixin inside a function, so we have to\r\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n    // functions cannot be called anywhere in Sass, we need to hack the call in\r\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n    $_: im-log('Unknown unit `#{unit($value)}`.');\r\n  }\r\n\r\n  @if $operator == '>' {\r\n    $value: $value + $interval;\r\n  } @else if $operator == '<' {\r\n    $value: $value - $interval;\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n  // If it is part of $media-expressions, it has no operator\r\n  // then there is no need to go any further, just return the value\r\n  @if map-has-key($media-expressions, $expression) {\r\n    @return map-get($media-expressions, $expression);\r\n  }\r\n\r\n  $operator: get-expression-operator($expression);\r\n  $dimension: get-expression-dimension($expression, $operator);\r\n  $prefix: get-expression-prefix($operator);\r\n  $value: get-expression-value($expression, $operator);\r\n\r\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n  @if length($list) < 1 or $start > $end {\r\n    @return ();\r\n  }\r\n\r\n  $result: ();\r\n\r\n  @for $i from $start through $end {\r\n    $result: append($result, nth($list, $i));\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n  @if type-of($value) == 'number' {\r\n    @return $value;\r\n  } @else if type-of($value) != 'string' {\r\n    $_: im-log('Value for `to-number` should be a number or a string.');\r\n  }\r\n\r\n  $first-character: str-slice($value, 1, 1);\r\n  $result: 0;\r\n  $digits: 0;\r\n  $minus: ($first-character == '-');\r\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\r\n\r\n  // Remove +/- sign if present at first character\r\n  @if ($first-character == '+' or $first-character == '-') {\r\n    $value: str-slice($value, 2);\r\n  }\r\n\r\n  @for $i from 1 through str-length($value) {\r\n    $character: str-slice($value, $i, $i);\r\n\r\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\r\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\r\n    }\r\n\r\n    @if $character == '.' {\r\n      $digits: 1;\r\n    } @else if $digits == 0 {\r\n      $result: $result * 10 + map-get($numbers, $character);\r\n    } @else {\r\n      $digits: $digits * 10;\r\n      $result: $result + map-get($numbers, $character) / $digits;\r\n    }\r\n  }\r\n\r\n  @return if($minus, -$result, $result);\r\n}\r\n\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\r\n\r\n  @if not index(map-keys($units), $unit) {\r\n    $_: im-log('Invalid unit `#{$unit}`.');\r\n  }\r\n\r\n  @return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Kitty Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n  // Save global configuration\r\n  $global-breakpoints: $breakpoints;\r\n  $global-media-expressions: $media-expressions;\r\n\r\n  // Update global configuration\r\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n  @content;\r\n\r\n  // Restore global configuration\r\n  $breakpoints: $global-breakpoints !global;\r\n  $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n  @if ($im-media-support and length($conditions) == 0) or\r\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\r\n    @content;\r\n  } @else if ($im-media-support and length($conditions) > 0) {\r\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n      // Recursive call\r\n      @include media(slice($conditions, 2)...) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}","@import \"./BreakPoints.scss\";\r\n\r\n@mixin purple {\r\n    font-size: 48px;\r\n    color: #8362F2;\r\n    font-weight: 600;\r\n}\r\n@mixin underline {\r\n    color: #8362F2;\r\n    text-decoration: underline;\r\n}\r\n\r\n.country-details-cont{\r\n  width: 95%;\r\n  max-width: 1024px;\r\n  margin: 0 auto;\r\n  padding-bottom: 50px;\r\n  .back-btn{\r\n    width: 169px;\r\n    background-color:#8362F2; \r\n    display: flex;\r\n    padding: 10px 12px 12px 10px;\r\n    border-radius: 10px;\r\n    margin: 20px 0 20px 0px;\r\n    cursor: pointer;\r\n    svg{\r\n        margin-top: 3px;\r\n        margin-right: 10px;\r\n    }\r\n    p{\r\n        color: white;\r\n        margin-left: 5px;\r\n        font-weight: 400;\r\n    }\r\n  }\r\n  .name-details{\r\n    .nameflag{\r\n        margin-bottom: 10px;\r\n        display: flex;\r\n        @include media(\"<=tablet\"){\r\n            width: 95%;\r\n            margin: 0 auto 10px auto;\r\n        }\r\n        h1{\r\n            font-size: 48px;\r\n        }\r\n        img{\r\n            margin-top: 20px;\r\n            margin-left: 10px;\r\n            width: 48px;\r\n            height: 36px;\r\n            box-shadow: 3px 2px 7px rgb(148, 148, 148);\r\n        }\r\n    }\r\n    .more-details{\r\n        display: flex;\r\n        @include media(\"<=tablet\"){\r\n            width: 95%;\r\n            margin: 0 auto 0 auto;\r\n        }\r\n        p{  margin-right: 10px;\r\n            color: white;\r\n            font-weight: 600;\r\n            background-color: #8DD5CC;\r\n            font-size: 12px;\r\n            padding: 5px 10px;\r\n            border-radius: 10px;\r\n        }\r\n    }\r\n  }\r\n  .sub-region{\r\n    display: flex;\r\n    @include media(\"<=tablet\"){\r\n        display: block;\r\n        div{\r\n            width: 95%;\r\n            margin: 0px auto 10px auto;\r\n        }\r\n      } \r\n  }\r\n  .latlong{\r\n    top: 35px;\r\n    overflow: hidden;\r\n    position: relative;\r\n    width: 45%;\r\n    max-width: 504px;\r\n    height: 150px;\r\n    box-shadow:0 0 4pt 2pt rgba(169, 169, 169, 0.155) ;\r\n    margin-right: 20px;\r\n    @include media(\"<=tablet\"){\r\n        top: 20px;\r\n    }\r\n    h6{\r\n        text-align: left;\r\n        font-size:18px ;\r\n        margin: 20px 0 15px 20px;\r\n        position: absolute;\r\n    }\r\n    img{\r\n        z-index: 0;\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        width: 200px;\r\n        top: 20px;\r\n    }\r\n    .latlong-info{\r\n        position: absolute;\r\n        bottom: 30px;\r\n        left: 20px;\r\n        span{\r\n            @include purple;\r\n        }\r\n    }\r\n}\r\n.CRS-section{\r\n    top: 35px;\r\n    overflow: hidden;\r\n    position: relative;\r\n    width: 50%;\r\n    max-width: 504px;\r\n    height: 150px;\r\n    margin-right: 20px;\r\n    box-shadow:0 0 4pt 2pt rgba(169, 169, 169, 0.155) ;\r\n    @include media(\"<=tablet\"){\r\n        top: 20px;\r\n    }\r\n    .first{\r\n        margin-top: 30px;\r\n    }\r\n    h6{\r\n        font-size: 18px;\r\n        text-align: left;\r\n        margin: 7px 0 0 20px;\r\n        font-weight: 400;\r\n    }\r\n}\r\n  .callncurr-cont{\r\n    display: flex;\r\n    @include media(\"<=tablet\"){\r\n        margin-left: 12px;\r\n    }\r\n  }\r\n  .calling-cont{\r\n    width: 50%;\r\n    text-align: left;\r\n    margin-top: 70px;\r\n    margin-right: 20px;\r\n    h6{\r\n        font-size: 20px;\r\n    }\r\n    h1{\r\n        @include purple;\r\n    }\r\n    span{\r\n        @include underline;\r\n        cursor: pointer;\r\n    }\r\n}\r\n.currency-cont{\r\n    width: 45%;\r\n    text-align: left;\r\n    margin-top: 70px;\r\n    h6{\r\n        font-size: 20px;\r\n    }\r\n    h1{\r\n        @include purple;\r\n    }\r\n    span{\r\n        @include underline;\r\n        cursor: pointer;\r\n    }\r\n}\r\n}\r\n.hidden{\r\n    display: none;\r\n}\r\n.other-cont{\r\n    width:200px ;\r\n    max-height: 110px;\r\n    outline: solid;\r\n    color: white;\r\n    background-color:#525252 ;\r\n    padding: 15px 15px 15px 20px;\r\n    overflow-y: auto;\r\n    margin-top: 10px;\r\n    border-radius: 10px;\r\n    display: none;\r\n    p{\r\n        margin-bottom: 5px;\r\n    }\r\n}\r\n.other-mbl{\r\n    float: right;\r\n    margin-right: 10px;\r\n}\r\n\r\n.hover-sect:hover .other-cont{\r\n    display: block;\r\n}\r\n.money{\r\n    top: 20px;\r\n        overflow: hidden;\r\n        position: relative;\r\n        width: 50%;\r\n        max-width: 504px;\r\n        height: 150px;\r\n        box-shadow:0 0 4pt 2pt rgba(169, 169, 169, 0.155) ;\r\n        margin-right: 20px;\r\n        h6{\r\n            font-size: 20px;\r\n            margin: 20px 0 0 20px ;\r\n            display: inline-flex;\r\n        }\r\n        p{\r\n            margin-left: 10px;\r\n            font-size: 18px;\r\n            display: inline-flex;\r\n            @include media(\"<=set3\"){\r\n                margin-left: 20px;\r\n            }\r\n        }\r\n        .dollar-sign{\r\n            margin: 7px 0  0 25px;\r\n            @include media(\"<=set3\"){\r\n                padding-left: 20px;\r\n            }\r\n            span{\r\n                font-size: 48px;\r\n                font-weight: 600;\r\n            }\r\n            .signed{\r\n                color: rgb(45, 252, 107);\r\n            }\r\n        }\r\n}\r\n\r\n.population{\r\n    top: 20px;\r\n    overflow: hidden;\r\n    position: relative;\r\n    width: 45%;\r\n    max-width: 504px;\r\n    height: 150px;\r\n    box-shadow:0 0 4pt 2pt rgba(169, 169, 169, 0.155) ;\r\n    h6{\r\n        font-size: 20px;\r\n        margin: 20px 0 0 20px ;\r\n    }\r\n    img{\r\n        color: #878787;\r\n        z-index: 0;\r\n        position: absolute;\r\n        top: 30px;\r\n        right: -75px;\r\n        width: 240px;\r\n        filter: invert(55%) sepia(17%) saturate(1%) hue-rotate(41deg) brightness(93%) contrast(98%);\r\n        opacity: 0.25;\r\n    }\r\n    p{\r\n        font-size: 48px;\r\n        font-weight: 600;\r\n        color: rgb(48, 112, 251);\r\n        margin: 7px 0  0 25px;\r\n        @include media(\"<=set3\"){\r\n            margin-left: 17px;\r\n        }\r\n    }\r\n}\r\n","@import \"./BreakPoints.scss\";\r\n.credit-container{\r\n    z-index: 3;\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100vh;\r\n    background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0));\r\n    backdrop-filter: blur(10px);\r\n    -webkit-backdrop-filter: blur(10px);\r\n    top: 0;\r\n    span{\r\n        position: absolute;\r\n        top: 10px;\r\n        color: black;\r\n        font-weight: 700;\r\n        font-size: 30px;\r\n        right: 6%;\r\n        cursor: pointer;\r\n        @include media (\">=set1\"){\r\n            margin-right: 10%;\r\n        }\r\n        @include media (\">=desktop\"){\r\n            right: 0;\r\n        }\r\n    }\r\n}\r\n.info-credit{\r\n    width: 90%;\r\n    max-width: 500px;\r\n    height: 450px;\r\n    position: relative;\r\n    top: 90px;\r\n    margin: 0 auto;\r\n    border-radius: 15px;\r\n    background-color: white;\r\n    padding: 30px 0 ;\r\n    h1{\r\n        font-size: 24px;\r\n        text-align: center;\r\n        margin-bottom: 100px;\r\n    }\r\n    h2{\r\n        font-size: 20px;\r\n        margin: 5px 7% ;\r\n    }\r\n    a{\r\n        display: block;\r\n        margin: 5px 7% ;\r\n        text-decoration: none;\r\n        color: rgb(36, 141, 240);\r\n    }\r\n    .visit-container{\r\n        width: 100%;\r\n        position: absolute;\r\n        bottom: 20px;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        h2{\r\n            text-align: center;\r\n            margin: 0;\r\n        }\r\n        a{\r\n            text-align: center;\r\n            font-size: 22px;\r\n        }\r\n    }\r\n}"],"names":[],"sourceRoot":""}